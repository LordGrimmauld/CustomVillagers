buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
plugins {
    id 'com.github.johnrengelman.shadow' version '5.2.0'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

boolean dev = System.getenv('RELEASE') == null || System.getenv('RELEASE').equals('false');

ext.buildnumber = 0
project.buildnumber = System.getenv('BUILD_NUMBER') != null ? System.getenv('BUILD_NUMBER') : "custom"

version = "mc${minecraft_version}_v${mod_version}" + (dev ? "+${buildnumber}" : '')
group = 'mod.grimmauld.custom_villagers'
archivesBaseName = 'custom_villagers'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
    mappings channel: 'snapshot', version: '20200301-mixed-1.15.2'
	accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    
    runs {		
		client {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'info'
            property 'fml.earlyprogresswindow', 'false'
            mods {
                custom_villagers {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run/server')
            property 'forge.logging.console.level', 'info'
            mods {
                custom_villagers {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'fml.earlyprogresswindow', 'false'
            args '--mod', 'custom_villagers', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources')
            mods {
                custom_villagers {
                    source sourceSets.main
                }
            }
        }
    }
}

compileJava {
    options.compilerArgs = ["-Xdiags:verbose"]
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

repositories {
    maven {
        // location of the maven that hosts JEI files
        name "Progwml6 maven"
        url "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name "ModMaven"
        url "https://modmaven.k-4u.nl"
    }
    maven {
        //location of the maven for vazkii's mods
        name "blamejared"
        url "http://maven.blamejared.com/"
    }
    maven {
        //location of the maven for mixed mappings and registrate
        name = "tterrag maven"
        url = "https://maven.tterrag.com/"
    }
}

configurations {
    shade
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    
    def registrate = "com.tterrag.registrate:Registrate:MC${minecraft_version}-${registrate_version}"
    implementation fg.deobf(registrate)
    shade registrate
    
    // compile against the JEI API but do not include it at runtime
 	compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}:api")
  	// at runtime, use the full JEI jar
  	runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}")

}

jar {
    classifier = 'slim'
    manifest {
        attributes([
            "Specification-Title": "custom_villagers",
            "Specification-Vendor": "Grimmauld",
            "Specification-Version": "1",
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"Grimmauld",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

shadowJar {
    classifier = ''
    configurations = [project.configurations.shade]
    relocate 'com.tterrag.registrate', 'com.simibubi.create.repack.registrate'
}

reobf {
    shadowJar {}
}
